Ext.define('X.controller.mixin.LoginLogout', {
    /*
     * LOGIN
     */
    //    This expects:
    //    {
    //      user: <Object>
    //    }
    //    This is currently used only when:
    //      1. the user signs up for the first time; if the sign up is successful, use
    //         this to log her in automatically
    //      2. the user explicitly logs in via the login form
    //    If a user is already logged in but refreshes the page, then the session gets refreshed
    //    every time the authenticated user store loads 
    //    This: 
    //      1. sets session
    //      2. sets authenticated user
    logUserIn: function(options) {
        var me = this;
        if (me.getDebug()) {
            console.log('Debug: X.controller.mixin.User.logUserIn(): Options:');
            console.log(options);
            console.log('Debug: Timestamp: ' + Ext.Date.format(new Date(), 'H:i:s'));
        }

        options = (Ext.isObject(options) && !Ext.isEmpty(options)) ? options : false;
        if (Ext.isObject(options)) {
            
            var user = ('user' in options && Ext.isObject(options.user) && !Ext.isEmpty(options.user)) ? options.user : false;
            if (Ext.isObject(user)) {
                
                var unSyncedAuthenticatedUser = Ext.create('X.model.AuthenticatedUser', user);
                if (Ext.isObject(unSyncedAuthenticatedUser) && 'isValid' in unSyncedAuthenticatedUser && unSyncedAuthenticatedUser.isValid()) {
                    
                    var parseSessionStore = Ext.getStore('ParseSessionStore');
                    if (Ext.isObject(parseSessionStore)) {
                        
                        var isSessionSet = parseSessionStore.setSession({
                            userId: unSyncedAuthenticatedUser.get('objectId'),
                            sessionToken: unSyncedAuthenticatedUser.get('sessionToken')
                        });
                        
                        return isSessionSet;
                    }
                }
            }
        }

        return false;
    },
    /*
     * LOGOUT
     */
    //    A user is never logged out of Parse, meaning that the session key generated by Parse for any user
    //    lives forever. So, logging out means that any subsequent request to Parse's REST API should
    //    not contain the session key header, the authenticated user store's url should not have any user id
    //    as a postfix to its endpoint,  the authenticated user store must be emptied, and the 
    //    parse session localstorage store must be emptied
    logUserOut: function() {
        var me = this;
        if (me.getDebug()) {
            console.log('Debug: X.controller.mixin.User.logUserOut(): Timestamp: ' + Ext.Date.format(new Date(), 'H:i:s'));
        }
        
        //        Remove all variables on X that are references to the authenticated user
        me.resetReferencesOnXToGivenAuthenticatedUser();
        
        var authenticatedUserStore = Ext.getStore('AuthenticatedUserStore');
        if (Ext.isObject(authenticatedUserStore)) {
            authenticatedUserStore.reset();
        }
        
        var parseSessionStore = Ext.getStore('ParseSessionStore');
        if (Ext.isObject(parseSessionStore)) {
            parseSessionStore.reset();
        }
        
        var deviceContactStore = Ext.getStore('DeviceContactStore');
        if (Ext.isObject(deviceContactStore)) {
            deviceContactStore.reset();
        }

        return me;
    }
});
